---
description: 
globs: *.py, *.ts, *.tsx, *.js, *.jsx, *.go, *.java, *.cpp, *.c, *.h
alwaysApply: false
---
---
description: 
globs: *.py, *.ts, *.tsx, *.js, *.jsx, *.go, *.java, *.cpp, *.c, *.h
alwaysApply: false
---

# 代码标准与技术选型规范

## Agent 设计规范

### 框架要求
- **必选框架**: `LangChain` 或 `LangGraph` 
- **架构模式**: 多 Agent 协作，每个 Agent 职责单一
- **数据校验**: 所有输出必须有 Pydantic Schema 校验
- **准确性原则**: 准确性是第一原则，优于速度和便利性

### 任务执行流程
1. **生成计划**: 复杂任务先生成分步骤执行计划
2. **分步确认**: 按计划逐步与用户确认并执行
3. **错误处理**: 支持步骤级别的重试机制
4. **工具定义**: 所有 Function Calling 必须有清晰的 JSON Schema

## 代码风格规范

### 编程范式
- **优先选择**: 函数式和声明式编程
- **避免**: 过度的面向对象设计和复杂继承
- **原则**: 简洁、可读、可测试

### 命名约定
- **函数名**: 动词开头，清晰表达功能 (`get_user_info`, `validate_input`)
- **变量名**: 名词，避免缩写 (`user_data` 而非 `ud`)
- **类名**: PascalCase (`UserManager`, `DataProcessor`)
- **常量**: 全大写 (`MAX_RETRY_COUNT`, `DEFAULT_TIMEOUT`)

### Python 特定规范

#### 类型提示
* 使用 dict, list, | 原生类型，而不是 typing.Dist, typing.List, typing.Optional 

#### 路径处理
* 用 pathlib.Path 而不是 os.path 的方法

#### 文档字符串
```python
def calculate_score(data: dict[str, float], weights: dict[str, float]) -> float:
    """计算加权评分.
    
    为什么需要这个函数：业务需要根据不同指标的权重计算综合评分，
    而不是简单的平均值，因为不同指标的重要性不同。
    
    Args:
        data: 包含各项指标数值的字典
        weights: 各项指标对应的权重
        
    Returns:
        计算得出的加权评分
        
    Raises:
        ValueError: 当权重总和不为1时
    """
```

#### 格式规范检查
* 编程结束后，使用 ruff 与 mypy 进行检查，都通过不会出现严谨的格式问题


#### 包的引入
* 最好使用绝对路径导入包，而不是相对路径
* 所有包的引入，最好放在文件开头，而不是函数内部


## 技术选型规范

### 后端技术栈
**首选方案**: Python + FastAPI
- 快速开发和部署
- 自动生成 API 文档
- 优秀的类型提示支持
- 丰富的生态系统

**备选方案**: Go + Hz 框架（复杂项目）
- 高性能要求
- 并发处理需求
- 微服务架构

### 前端技术栈
**首选方案**: Python 后端渲染
- Jinja2Templates
- 保持技术栈统一
- 降低复杂度

**限制**: 禁止引入用户不熟悉的前端框架
- 避免 React、Vue 等复杂框架
- 保持简洁实用

### 数据存储
**选择原则**:
- SQLite: 原型和小型项目
- PostgreSQL: 生产级应用
- Redis: 缓存和会话存储

### 开发工具
- **代码格式化**: Black + isort
- **类型检查**: mypy ruff
- **代码质量**: ruff
- **测试框架**: pytest
- **依赖管理**: Poetry 或 pip-tools

## 质量保证

### 测试要求
- **单元测试**: 核心业务逻辑必须有测试覆盖
- **集成测试**: API 端点和数据库交互
- **覆盖率目标**: 80% 以上

### 代码审查标准
1. **功能正确性**: 实现符合需求
2. **代码风格**: 遵循项目规范
3. **性能考虑**: 避免明显的性能问题
4. **安全检查**: 输入验证和权限控制
5. **可维护性**: 清晰的逻辑和适当的注释

### 错误处理
- **明确异常**: 使用具体的异常类型
- **日志记录**: 关键操作和错误必须记录
- **用户友好**: 错误信息对用户有意义
- **快速失败**: 及早发现和报告问题

## 性能和安全考虑

### 性能原则
- **避免过早优化**: 先确保正确性
- **测量驱动**: 基于实际测量数据优化
- **缓存策略**: 合理使用缓存减少重复计算
- **数据库优化**: 适当的索引和查询优化

### 安全最佳实践
- **输入验证**: 所有外部输入必须验证
- **权限控制**: 实施最小权限原则
- **敏感信息**: 不在代码中硬编码密码和密钥
- **依赖安全**: 定期更新依赖，检查安全漏洞
