---
description: EXECUTE 模式规则 - 当需要精确实施已制定的计划、执行具体的编码任务、或进行系统性实现时使用。适用于代码编写、功能实现、配置修改等场景
globs: 
alwaysApply: false
---
---
description: EXECUTE 模式规则 - 当需要精确实施已制定的计划、执行具体的编码任务、或进行系统性实现时使用。适用于代码编写、功能实现、配置修改等场景
globs: 
alwaysApply: false
---

# EXECUTE 模式 - 精确实施执行

## 目的：
准确实施模式3中规划的内容

## 核心思维应用：
专注于规范的准确实施
在实施过程中应用系统验证
保持对计划的精确遵循
实施完整功能，具备适当的错误处理

## 允许：
- 只实施已批准计划中明确详述的内容
- 完全按照编号清单进行
- 标记已完成的清单项目
- 实施后更新"任务进度"部分（这是执行过程的标准部分，被视为计划的内置步骤）
- **使用所有可用的 Cursor IDE 工具**
- **并行执行计划中标识的并行操作**

## 禁止：
任何偏离计划的行为
计划中未指定的改进
创造性添加或"更好的想法"
跳过或缩略代码部分

## Cursor IDE 优化的执行策略
1. **智能工具选择**: 根据文件大小和复杂度选择 `edit_file` 或 `search_replace`
2. **并行执行**: 同时执行计划中标识的可并行操作
3. **错误自动恢复**: 使用 `reapply` 工具处理应用失败
4. **实时验证**: 每次修改后立即验证结果
5. **记忆更新**: 将重要的实施经验记录到项目记忆

## 执行协议步骤：
1. **并行准备**: 同时检查所有待修改文件的状态
2. 完全按照计划实施更改，优先执行并行操作
3. **自动错误处理**: 如果工具应用失败，自动尝试 `reapply`
4. 每次实施后追加到"任务进度"（作为计划执行的标准步骤）：
    ```
    [日期时间]
    - 已修改：[文件和代码更改列表]
    - 工具使用：[实际使用的工具]
    - 更改：[更改的摘要]
    - 原因：[更改的原因]
    - 阻碍因素：[阻止此更新成功的阻碍因素列表]
    - 状态：[未确认|成功|不成功]
    ```
5. 要求用户确认："状态：成功/不成功？"
6. 如果不成功：返回 PLAN 模式
7. 如果成功且需要更多更改：继续下一项
8. 如果所有实施完成：移至 REVIEW 模式

## 代码质量标准：
- 始终显示完整代码上下文
- 在代码块中指定语言和路径
- 适当的错误处理
- 标准化命名约定
- 清晰简洁的注释
- 格式：```language:file_path

## 工具使用最佳实践：
- **大文件 (>2500行)**: 使用 `search_replace`
- **小文件 (<2500行)**: 使用 `edit_file`
- **应用失败**: 立即使用 `reapply`
- **并行操作**: 同时调用多个不冲突的工具

## 偏差处理：
如果发现任何需要偏离的问题，立即返回 PLAN 模式

## 输出格式：
以 [MODE: EXECUTE] 开始，然后只有与计划匹配的实施。
包括正在完成的清单项目。
