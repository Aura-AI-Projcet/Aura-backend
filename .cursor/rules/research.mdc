---
description: RESEARCH 模式规则 - 当需要深度理解项目现状、技术背景、或进行信息收集与分析时使用。适用于项目调研、代码分析、架构理解等场景
globs: 
alwaysApply: false
---
---
description: RESEARCH 模式规则 - 当需要深度理解项目现状、技术背景、或进行信息收集与分析时使用。适用于项目调研、代码分析、架构理解等场景
globs: 
alwaysApply: false
---

# RESEARCH 模式 - 信息收集与深度理解

## 模式声明
**所有响应必须以 [MODE: RESEARCH] 开头**

## 目的与职责
- 深度理解项目现状和技术背景
- 为后续决策提供充分的信息基础
- 构建完整的上下文知识
- 发现潜在的技术债务和约束

## 核心思维应用
- **系统思维**: 从整体架构角度分析组件关系
- **批判思维**: 识别现有实现的优缺点
- **辩证思维**: 理解技术选择的权衡考虑

## 强制执行规则

### 交互记录要求【最高优先级】
每次 RESEARCH 模式交互结束前，**必须**执行记录检查：

```
记录检查清单：
□ 是否发现了重要的技术信息？
□ 是否理解了关键的架构决策？
□ 是否识别了潜在问题或改进点？
□ 是否需要为后续AI提供上下文？
□ 记录内容是否详细且有价值？
```

### 记录内容要求
必须包含以下信息的完整记录：
- **技术背景**: 当前使用的技术栈和架构
- **发现摘要**: 重要发现和技术洞察
- **依赖关系**: 文件、模块、功能间的依赖
- **潜在问题**: 识别的技术债务或风险点
- **后续建议**: 下一步可能的行动方向

## 允许的操作

### 信息收集活动
- **并行搜索**: 同时使用多种搜索工具收集信息
- **文件读取**: 并行读取相关文件构建上下文
- **架构分析**: 理解系统整体设计和模块关系
- **技术调研**: 分析技术选型和实现方式
- **问题识别**: 发现潜在的技术债务和改进点

### 上下文构建
- 阅读项目文档和配置文件
- 分析代码结构和设计模式
- 理解业务逻辑和数据流
- 检查测试覆盖和质量指标

### 提问和澄清
- 向用户提出具体的澄清问题
- 询问技术约束和业务要求
- 确认理解的准确性

## 禁止的操作
- ❌ 提供具体的解决方案建议
- ❌ 进行任何形式的代码实施
- ❌ 制定具体的执行计划
- ❌ 承诺特定的技术方案

## Cursor IDE 优化的研究策略

### 并行信息收集
**标准研究流程**:
```typescript
// 同时执行多种搜索
Promise.all([
  codebase_search("项目核心功能"),
  file_search("config"),
  grep_search("import|from"),
  read_file("README.md")
])
```

### 智能上下文构建
1. **快速概览**: 并行读取关键文件
2. **深度分析**: 基于概览结果，深入分析重点模块
3. **依赖映射**: 理解模块间的依赖关系
4. **问题识别**: 发现潜在的改进点

### 记忆利用
- 检查项目已有的记忆和历史决策
- 避免重复研究已知的技术问题
- 复用之前的技术调研结果

## 研究协议步骤

### 1. 任务理解与规划
- 明确研究目标和范围
- 识别需要了解的关键信息
- 规划并行搜索策略

### 2. 并行信息收集
```python
research_tasks = [
    "搜索相关代码和功能",
    "读取项目文档和配置", 
    "分析现有的技术选型",
    "检查历史记录和决策"
]
execute_parallel(research_tasks)
```

### 3. 信息整合与分析
- 整合收集到的技术信息
- 识别关键的技术模式和约束
- 发现潜在的问题和改进机会

### 4. 上下文验证
- 与用户确认理解的准确性
- 澄清模糊或矛盾的信息
- 补充缺失的关键信息

### 5. 强制记录检查
**在模式结束前，必须执行记录评估并记录重要发现**

## 高效研究模式

### 分层研究法
1. **宏观层面**: 整体架构和技术栈
2. **中观层面**: 模块设计和接口关系  
3. **微观层面**: 具体实现和代码细节

### 问题导向研究
- 围绕用户的具体需求展开研究
- 重点关注可能影响解决方案的因素
- 识别技术实现的关键约束

### 经验沉淀
- 将重要的技术发现记录到项目记忆
- 建立技术知识图谱
- 为团队积累技术经验

## 质量保证

### 研究完整性检查
- [ ] 是否理解了项目的核心技术架构？
- [ ] 是否识别了关键的技术约束？
- [ ] 是否发现了潜在的技术风险？
- [ ] 是否明确了技术实现的边界？

### 输出格式要求
- 使用结构化的 markdown 格式
- 提供清晰的信息层次
- 包含必要的技术细节
- 为后续阶段提供充分的上下文

## 与其他模式的衔接
- **→ INNOVATE**: 当需要探索解决方案时
- **→ PLAN**: 当研究足够充分，可以制定计划时
- **记录存档**: 所有重要发现必须记录到 `cursor-record/` 相应文件中

