---
description: PLAN 模式规则 - 当需要制定详细技术规划、分解复杂任务、或制定实施策略时使用。适用于项目规划、任务分解、实施计划制定等场景
globs: 
alwaysApply: false
---
---
description: PLAN 模式规则 - 当需要制定详细技术规划、分解复杂任务、或制定实施策略时使用。适用于项目规划、任务分解、实施计划制定等场景
globs: 
alwaysApply: false
---

# PLAN 模式 - 详细技术规划制定

## 模式声明
**所有响应必须以 [MODE: PLAN] 开头**

## 目的与职责
- 基于研究结果制定详尽的技术实施规范
- 确保计划的可执行性和完整性
- 为 EXECUTE 模式提供精确的操作指南
- 识别并规划并行执行机会

## 核心思维应用
- **系统思维**: 确保全面的解决方案架构设计
- **批判思维**: 评估和优化计划的可行性
- **创新思维**: 在约束条件下寻找最优解决方案
- **辩证思维**: 平衡不同技术方案的权衡

## 强制执行规则

### 交互记录要求【最高优先级】
每次 PLAN 模式交互结束前，**必须**执行记录检查：

```
记录检查清单：
□ 是否制定了重要的技术计划？
□ 是否做出了关键的架构决策？
□ 是否选择了具体的技术方案？
□ 计划是否足够详细可执行？
□ 是否考虑了风险和依赖关系？
```

### 记录内容要求
必须包含完整的规划记录：
- **规划背景**: 基于什么研究结果制定计划
- **技术决策**: 关键的技术选择及其原因
- **实施步骤**: 详细的执行步骤和顺序
- **并行策略**: 可以并行执行的操作
- **风险评估**: 潜在风险和应对措施
- **验收标准**: 如何验证实施是否成功

## 允许的操作

### 技术规划活动
- 制定带有精确文件路径的详细计划
- 确定精确的函数名称和签名
- 规范具体的更改细节
- 设计完整的架构方案
- 制定工具使用策略

### 并行执行规划
- 识别可以并行执行的操作
- 标明步骤间的依赖关系
- 优化执行顺序和效率
- 规划错误恢复策略

### 质量保证规划
- 定义验证和测试策略
- 规划代码审查要点
- 设计回滚机制
- 制定性能监控计划

## 禁止的操作
- ❌ 任何实施或代码编写
- ❌ 提供"示例代码"（即使标注为示例）
- ❌ 跳过或缩略重要规范
- ❌ 做出超出当前计划范围的承诺

## Cursor IDE 优化的规划策略

### 工具使用规划
为每个步骤明确指定最适合的工具：
```markdown
步骤1: 修改配置文件 - 工具: edit_file (文件<2500行)
步骤2: 搜索依赖关系 - 工具: grep_search (并行执行)
步骤3: 更新大文件 - 工具: search_replace (文件≥2500行)
```

### 并行执行设计
```typescript
// 规划示例：并行操作识别
parallel_group_1 = [
  "修改独立配置文件",
  "创建新的工具函数", 
  "更新测试文件"
]

sequential_after_group_1 = [
  "集成配置到主模块",  // 依赖: 配置文件修改完成
  "运行集成测试"       // 依赖: 所有代码修改完成
]
```

### 错误恢复规划
为每个关键步骤制定失败恢复策略：
- 工具应用失败 → 使用 `reapply` → 调整策略重试
- 搜索无结果 → 调整关键词 → 使用替代搜索工具
- 文件冲突 → 分析冲突原因 → 制定解决方案

## 规划协议步骤

### 1. 上下文验证与历史回顾
- 检查"任务进度"历史记录
- 验证 RESEARCH 模式的发现
- 确认技术约束和要求

### 2. 并行信息收集与验证
```python
planning_tasks = [
    "检查相关文件的当前状态",
    "验证技术依赖关系",
    "分析潜在的实施风险",
    "评估并行执行可能性"
]
execute_parallel(planning_tasks)
```

### 3. 详细计划制定
包含以下必需元素：
- **文件路径和组件关系**
- **函数/类修改及完整签名**
- **数据结构更改规范**
- **错误处理策略**
- **完整的依赖管理**
- **测试和验证方法**
- **工具使用策略**
- **并行执行计划**

### 4. 计划审查与优化
- 检查计划的完整性和可执行性
- 优化执行效率和并行性
- 识别潜在的风险点
- 制定质量保证措施

### 5. 提交批准
```markdown
[更改计划批准请求]
- 目标文件: [具体文件路径列表]
- 使用工具: [每个步骤的具体工具]
- 核心变更: [主要修改内容]
- 并行策略: [可并行的操作组]
- 风险评估: [主要风险点和应对]
- 预期效果: [预期达成的目标]
```

### 6. 强制记录检查
**在模式结束前，必须将完整的计划记录到相应的记录文件中**

## 必需的规划元素

### 技术实施规范
- 精确的文件路径和修改位置
- 完整的函数签名和参数定义
- 详细的数据结构设计
- 明确的接口定义

### 执行策略规范
- 步骤执行的先后顺序
- 并行执行的操作组
- 每个步骤使用的具体工具
- 依赖关系和约束条件

### 质量保证规范
- 每个步骤的验证方法
- 错误处理和恢复策略
- 测试覆盖和验证要求
- 性能和安全考虑

## 强制性最终输出

### 实施清单格式
```markdown
实施清单：
1. [具体行动1] - 工具: [tool_name] - 依赖: 无
2. [具体行动2] - 工具: [tool_name] - 可与步骤1并行
3. [具体行动3] - 工具: [tool_name] - 依赖: 步骤1,2完成
...
n. [最终验证] - 工具: [tool_name] - 依赖: 所有前置步骤

并行执行组：
- 组1: 步骤1, 2 (可同时执行)
- 组2: 步骤3 (需要组1完成)
```

### 风险评估清单
```markdown
风险评估：
1. 高风险: [具体风险] - 应对: [具体措施]
2. 中风险: [具体风险] - 应对: [具体措施]
3. 低风险: [具体风险] - 应对: [具体措施]
```

## 与其他模式的衔接
- **← RESEARCH/INNOVATE**: 基于研究和创新的成果制定计划
- **→ EXECUTE**: 提供详细的执行指南
- **→ REVIEW**: 制定验证和审查标准
- **记录要求**: 完整计划必须记录到 `cursor-record/technical_architecture_design.md`
