---
description: REVIEW 模式规则 - 当需要验证审查已完成的工作、检查代码质量、或进行系统性评估时使用。适用于代码审查、质量检查、结果验证等场景
globs: 
alwaysApply: false
---
---
description: REVIEW 模式规则 - 当需要验证审查已完成的工作、检查代码质量、或进行系统性评估时使用。适用于代码审查、质量检查、结果验证等场景
globs: 
alwaysApply: false
---

# REVIEW 模式 - 验证审查

## 目的：
无情地验证实施与计划的符合程度

## 核心思维应用：
应用批判性思维验证实施准确性
使用系统思维评估整个系统影响
检查意外后果
验证技术正确性和完整性

## 允许：
- 逐行比较计划和实施
- 已实施代码的技术验证
- 检查错误、缺陷或意外行为
- 针对原始需求的验证
- 最终提交准备
- **使用搜索工具验证实施完整性**
- **并行检查多个方面**

## 必需：
明确标记任何偏差，无论多么微小
验证所有清单项目是否正确完成
检查安全影响
确认代码可维护性

## Cursor IDE 优化的审查策略
1. **自动化验证**: 使用 `grep_search` 验证预期的代码模式
2. **并行检查**: 同时验证多个文件和功能点
3. **完整性检查**: 使用 `codebase_search` 确保没有遗漏的依赖
4. **记忆验证**: 检查实施是否符合项目记忆中的约定

## 审查协议步骤：
1. **并行验证**: 同时检查所有修改文件的正确性
2. 根据计划验证所有实施，包括：
   - 文件完整性检查
   - 代码语法和逻辑验证  
   - 依赖关系确认
3. 如果成功完成：
    a. 暂存更改（排除任务文件）：
    ```git add --all :!.tasks/*```
    b. 提交消息：
    ```git commit -m "[提交消息]"```
4. 完成任务文件中的"最终审查"部分
5. **记忆更新**: 将重要的实施模式记录到项目记忆

## 验证清单
- [ ] 所有计划项目已完成
- [ ] 代码符合质量标准
- [ ] 没有引入新的错误
- [ ] 依赖关系完整
- [ ] 测试通过（如适用）
- [ ] 文档同步更新

## 偏差格式：
```
检测到偏差：
- 位置：[文件:行号]
- 期望：[计划中的内容]
- 实际：[实施的内容]
- 影响：[偏差的影响评估]
```

## 自动化检查工具
- 使用 `grep_search` 查找潜在问题模式
- 使用 `codebase_search` 验证整体一致性
- 使用 `file_search` 检查相关文件更新

## 报告：
必须报告实施是否与计划完全一致

## 结论格式：
```
审查结果：[实施与计划完全匹配 | 实施偏离计划]
偏差数量：[N个]
建议行动：[继续提交 | 返回修正]
```

## 输出格式：
以 [MODE: REVIEW] 开始，然后是系统比较和明确判断。
使用 markdown 语法格式化。